/*
* Recursive Descent Parser for Arithmetic Expressions with SDD Attributes
* Grammar:
*   E  → T E'      { E.val = E'.val, E'.inh = T.val }
*   E' → + T E'₁   { E'.val = E'₁.val, E'₁.inh = E'.inh + T.val }
*   E' → ε         { E'.val = E'.inh }
*   T  → F T'      { T.val = T'.val, T'.inh = F.val }
*   T' → * F T'₁   { T'.val = T'₁.val, T'₁.inh = T'.inh * F.val }
*   T' → ε         { T'.val = T'.inh }
*   F  → ( E )     { F.val = E.val }
*   F  → number    { F.val = number.lexval }
*
* FIRST sets:
*   E, T, F:  { number, '(' }
*   E':       { '+', ε }
*   T':       { '*', ε }
*/
#include <iostream>
#include <string>
#include <cctype>

using namespace std;

string input;          // Holds the input expression
size_t lookahead = 0;  // Current position in input

// Reports syntax error and exits
void error() {
    cerr << "Syntax error at position " << lookahead 
         << " (character '" << input[lookahead] << "')" << endl;
    exit(1);
}

// Consumes an expected character or throws error
void match(char expected) {
    if (lookahead < input.size() && input[lookahead] == expected) {
        lookahead++;
    } else {
        error();
    }
}

// Forward declarations
int E();
int E_prime(int inherited_val);
int T();
int T_prime(int inherited_val);
int F();

// E → T E' 
// Returns: E.val (synthesized)
int E() {
    // FIRST(T E') = { number, '(' } → Check if input starts with these
    if (lookahead >= input.size() || (!isdigit(input[lookahead]) && input[lookahead] != '(')) {
        error();
    }
    
    int t_val = T();          // Get T.val (synthesized)
    return E_prime(t_val);    // E.val = E'.val, passing T.val as E'.inh
}

// E' → + T E' | ε
// Parameters: inherited_val (E'.inh)
// Returns: E'.val (synthesized)
int E_prime(int inherited_val) {
    // FIRST(+ T E') = { '+' }, FIRST(ε) = FOLLOW(E') = { ')', '$' }
    if (lookahead < input.size() && input[lookahead] == '+') {
        match('+');
        int t_val = T();  // Get T.val
        // Compute E'₁.inh = E'.inh + T.val, recurse for E'₁.val
        return E_prime(inherited_val + t_val);  
    }
    // ε production: E'.val = E'.inh
    return inherited_val;  
}

// T → F T'
// Returns: T.val (synthesized)
int T() {
    // FIRST(F T') = { number, '(' } → Checked in F()
    int f_val = F();          // Get F.val (synthesized)
    return T_prime(f_val);    // T.val = T'.val, passing F.val as T'.inh
}

// T' → * F T' | ε
// Parameters: inherited_val (T'.inh)
// Returns: T'.val (synthesized)
int T_prime(int inherited_val) {
    // FIRST(* F T') = { '*' }, FIRST(ε) = FOLLOW(T') = { '+', ')', '$' }
    if (lookahead < input.size() && input[lookahead] == '*') {
        match('*');
        int f_val = F();  // Get F.val
        // Compute T'₁.inh = T'.inh * F.val, recurse for T'₁.val
        return T_prime(inherited_val * f_val);  
    }
    // ε production: T'.val = T'.inh
    return inherited_val;  
}

// F → ( E ) | number
// Returns: F.val (synthesized)
int F() {
    if (lookahead >= input.size()) error();
    
    if (input[lookahead] == '(') {
        match('(');
        int e_val = E();  // Get E.val
        match(')');
        return e_val;     // F.val = E.val
    }
    else if (isdigit(input[lookahead])) {
        // Parse multi-digit number (F.val = number.lexval)
        int num_val = 0;
        while (lookahead < input.size() && isdigit(input[lookahead])) {
            num_val = num_val * 10 + (input[lookahead] - '0');
            lookahead++;
        }
        return num_val;
    }
    else {
        error();
    }
    return 0; // unreachable
}

int main() {
    cout << "Enter an arithmetic expression (e.g., 2+3*4): ";
    getline(cin, input);
    input = input + '$'; // Append end marker
    
    try {
        int result = E();
        
        // Check if entire input was consumed
        if (lookahead < input.size() && input[lookahead] == '$') {
            cout << "Result: " << result << endl;
        } else {
            error();
        }
    } catch (...) {
        error();
    }
    
    return 0;
}
